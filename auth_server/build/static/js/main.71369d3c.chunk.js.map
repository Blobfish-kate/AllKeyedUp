{"version":3,"sources":["components/Homepage.js","components/FoundSong.js","components/Results.js","components/RecommendationForm.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","h1","Content","Button","button","Link","a","Homepage","c","i","push","className","href","type","Image","img","Overlay","Icon","FoundSong","props","src","song","album","images","url","alt","external_urls","spotify","target","name","artists","TitleContainer","H2","h2","Results","genreSelection","keySelection","onClick","backButton","recommendedSongs","spotifyApi","SpotifyWebApi","RecommendationForm","params","getHashParams","state","loggedIn","access_token","token","genres","keyList","mode","timeSelection","setAccessToken","getRecommendations","bind","handleChange","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","console","log","getAvailableGenreSeeds","then","data","setState","genre","this","key","indexOf","length","time","parseInt","seed_genres","min_key","max_key","min_mode","max_mode","min_time_signature","max_time_signature","target_popularity","tracks","value","map","item","majorKeys","Object","keys","minorKeys","timeSignatures","Array","from","v","k","ResultsContainer","FormContainer","style","display","onChange","id","required","React","Component","App","path","component","user","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.71369d3c.chunk.js","sourcesContent":["import React from \"react\"\r\nimport styled from 'styled-components'\r\nimport '../stylesheets/Homepage.scss'\r\n\r\nconst Container = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n    top: 0;\r\n    left: 0;\r\n    display: flex;\r\n    overflow: hidden\r\n`\r\nconst Title = styled.h1`\r\n    \r\n`\r\n\r\nconst Content = styled.div`\r\n    position: absolute;\r\n    width: 100%;\r\n    margin-top: 15%;\r\n    margin-bottom: 20%;\r\n    padding: 0 15%;\r\n    text-align: center\r\n`\r\nconst Button = styled.button`\r\n    height: 150%;\r\n    margin-top: 8%;\r\n    width: 40%;\r\n    font-size: larger;\r\n`\r\nconst Link = styled.a`\r\n\r\n`\r\n\r\nfunction Homepage() {\r\n    let c = []\r\n    for(let i=0; i < 200; i++) {\r\n        c.push(<span className=\"c\" />)\r\n    }\r\n    return(\r\n        <Container className=\"wrap\">\r\n            {c}\r\n            <Content>\r\n                <Title>All Keyed Up</Title>\r\n                <h2>Song recommendations in your favourite key...</h2>\r\n                <Link href=\"http://localhost:8888/login\">\r\n                    <Button type=\"button\" className=\"btn btn-light\">Login With Spotify</Button>\r\n                </Link>\r\n            </Content>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Homepage","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Image = styled.img`\r\n\r\n`\r\n\r\nconst Overlay = styled.div`\r\n    margin-top: 25%;\r\n    opacity: 0;\r\n    tranisition: .3s ease;\r\n`\r\nconst Icon = styled.i`\r\n    font-size: 100px;\r\n    color: white\r\n`\r\n\r\nconst Container = styled.div`\r\n    margin: 20px auto;\r\n    text-align: center;\r\n    &:hover ${Overlay} {\r\n        opacity: 1\r\n    }\r\n`\r\n\r\nfunction FoundSong(props) {\r\n    return(\r\n                <Container className=\"container col-lg-4 col-md-6\">\r\n                    <div className=\"card shadow\">\r\n                        <Image className=\"card-img\" src={props.song.album.images[0].url} alt=\"album cover\"/>\r\n                        <Overlay className=\"card-img-overlay text-white\">\r\n                            <a href={props.song.external_urls.spotify} target=\"_blank\">\r\n                                <Icon className=\"fa fa-play-circle card-title\" />\r\n                            </a>\r\n                        </Overlay>\r\n                        <div className=\"card-body\">\r\n                            <h4 className=\"card-title\">{props.song.name}</h4>\r\n                            <p className=\"card-text\">{props.song.artists[0].name}</p>\r\n                        </div>\r\n                    </div>\r\n                </Container>\r\n    )\r\n}\r\n\r\nexport default FoundSong","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n    width: 90vw;\r\n    margin: 0 auto\r\n`\r\nconst TitleContainer = styled.div`\r\n    width: 100%;\r\n    background-color: white;\r\n    margin: auto;\r\n    text-align: center\r\n`\r\n\r\nconst H2 = styled.h2`\r\n    color: black\r\n`\r\n\r\nfunction Results(props) {\r\n    return(\r\n        <Container className=\"container\">\r\n            <TitleContainer className=\"jumbotron\">\r\n                <H2>Results for: {props.genreSelection} tracks in {props.keySelection}</H2>\r\n                <h4>Want to change your search critera?</h4>\r\n                <br />\r\n                <button className=\"btn btn-light\" onClick={props.backButton}>Back</button>\r\n            </TitleContainer>\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    {props.recommendedSongs}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Results","import React from 'react';\r\nimport SpotifyWebApi from 'spotify-web-api-js'\r\nimport styled from 'styled-components'\r\n\r\nimport FoundSong from './FoundSong';\r\nimport Results from './Results'\r\n\r\nconst spotifyApi = new SpotifyWebApi()\r\n\r\nclass RecommendationForm extends React.Component {\r\n  constructor() {\r\n    super()\r\n    const params = this.getHashParams()\r\n    this.state = {\r\n      loggedIn: params.access_token ? true : false,\r\n      token: params.access_token,\r\n      genres: null,\r\n      keyList: {'C': 0, 'C#': 1, 'D': 2, 'D#': 3, 'E': 4, 'F': 5, 'F#': 6, 'G': 7, 'G#': 8, 'A': 9, 'Bb': 10, 'B': 11},\r\n      mode: {'major': 1, 'minor': 0},\r\n      keySelection: \"\",\r\n      genreSelection: \"\",\r\n      timeSelection: 0,\r\n      recommendedSongs: null\r\n    }\r\n    if (params.access_token){\r\n      spotifyApi.setAccessToken(params.access_token)\r\n    }\r\n\r\n    this.getRecommendations = this.getRecommendations.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.backButton = this.backButton.bind(this)\r\n  }\r\n\r\n  getHashParams() {\r\n    var hashParams = {}\r\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1)\r\n    while (e = r.exec(q)) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2])\r\n    }\r\n    console.log(\"Hash params:\" + hashParams)\r\n    return hashParams\r\n  }\r\n\r\n  componentDidMount() {\r\n    spotifyApi.getAvailableGenreSeeds()\r\n      .then((data) => {\r\n        this.setState({\r\n          genres: data.genres\r\n        })\r\n      })\r\n  }\r\n\r\n  getRecommendations() {\r\n    let genre = this.state.genreSelection\r\n    let key = this.state.keyList[this.state.keySelection.substring(0, this.state.keySelection.indexOf('m')-1)]\r\n    let mode = this.state.mode[this.state.keySelection.substring(this.state.keySelection.indexOf('m'), this.state.keySelection.length)]\r\n    let time = parseInt(this.state.timeSelection)\r\n    console.log(\"Key: \" + key)\r\n    console.log(\"Mode: \" + mode)\r\n    spotifyApi.getRecommendations({\r\n      seed_genres: genre, \r\n      min_key: key, \r\n      max_key: key, \r\n      min_mode: mode, \r\n      max_mode: mode,\r\n      min_time_signature: time,\r\n      max_time_signature: time,\r\n      target_popularity: 100\r\n    })\r\n      .then((data) => {\r\n        console.log(data)\r\n        this.setState({\r\n          recommendedSongs: data.tracks\r\n        })\r\n      })\r\n  }\r\n  \r\n\r\n  handleChange(e) {\r\n    const {name, value} = e.target\r\n    this.setState({[name] : value})\r\n  }\r\n\r\n  backButton() {\r\n    this.setState({\r\n      recommendedSongs: null\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    const genres = this.state.genres ? this.state.genres.map(item => <option>{item}</option>) : null\r\n    const majorKeys = Object.keys(this.state.keyList).map(item => <option>{item} major</option>)\r\n    const minorKeys = Object.keys(this.state.keyList).map(item => <option>{item} minor</option>)\r\n    const timeSignatures = Array.from({length: 8}, (v, k) => k+1).map(item => <option>{item}</option>)\r\n    const recommendedSongs = this.state.recommendedSongs ? this.state.recommendedSongs.map((item) => \r\n        <FoundSong song={item} />    ) : null\r\n\r\n    \r\n\r\n    const ResultsContainer = styled.div`\r\n      \r\n    `\r\n    const FormContainer = styled.div`\r\n      padding-top: 10px;\r\n      margin-top: 20%;\r\n      background-color: white;\r\n      text-align: center;\r\n      width: 60vw;\r\n      background-color: whitesmoke\r\n    `\r\n    const H2 = styled.h2`\r\n      color: black\r\n    `\r\n    return(\r\n      <div>\r\n        <h1>All Keyed Up</h1>\r\n        <div style={{display: this.state.recommendedSongs && \"none\"}} >\r\n          <FormContainer className=\"jumbotron\">\r\n            <div>\r\n              <H2>Choose your favourite genre and key...</H2>\r\n              <label>Choose a Genre (<strong>required</strong>): </label>\r\n              <select onChange={this.handleChange} id=\"genreSelection\" name=\"genreSelection\" value={this.state.genreSelection} required>\r\n                <option>--Select genre--</option>\r\n                {genres}\r\n              </select>\r\n              <br />\r\n              <label>Choose a Key: </label>\r\n              <select onChange={this.handleChange} id=\"trackKey\" name=\"keySelection\" value={this.state.keySelection}>\r\n                <option>--Select key--</option>\r\n                {majorKeys}\r\n                {minorKeys}\r\n              </select>\r\n              <br />\r\n              <label>Choose a Time Signature: </label>\r\n              <select onChange={this.handleChange} id=\"timeSelection\" type=\"number\" name=\"timeSelection\" value={this.state.timeSelection}>\r\n                <option>--Select beats/bar--</option>\r\n                {timeSignatures}\r\n              </select>\r\n              <span style={{display: !this.state.timeSelection && \"none\"}}>beats per bar</span>\r\n            </div>\r\n            <button className=\"btn btn-light\" onClick={this.getRecommendations}>Get recommendations</button>\r\n          </FormContainer>\r\n        </div>\r\n\r\n\r\n        <ResultsContainer style={{display: !this.state.recommendedSongs && \"none\"}}>\r\n          <Results \r\n            recommendedSongs={recommendedSongs} \r\n            keySelection={this.state.keySelection}\r\n            genreSelection={this.state.genreSelection}\r\n            backButton = {this.backButton}  \r\n          />\r\n        </ResultsContainer>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default RecommendationForm;\r\n","import React from 'react';\nimport {Route, Switch, BrowserRouter} from \"react-router-dom\"\n\nimport './App.css';\nimport SpotifyWebApi from 'spotify-web-api-js'\n\nimport Homepage from './components/Homepage'\nimport RecommendationForm from './components/RecommendationForm'\n\nconst spotifyApi = new SpotifyWebApi()\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    const params = this.getHashParams()\n    this.state = {\n      loggedIn: params.access_token ? true : false,\n      token: params.access_token,\n    }\n    if (params.access_token){\n      spotifyApi.setAccessToken(params.access_token)\n    }\n    this.getHashParams = this.getHashParams.bind(this)\n  }\n\n  getHashParams() {\n    var hashParams = {}\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1)\n    while (e = r.exec(q)) {\n      hashParams[e[1]] = decodeURIComponent(e[2])\n    }\n    console.log(\"Hash params:\" + hashParams)\n    return hashParams\n  }\n  \n  render() {\n\n    return(\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/recommendation\" component={() => <RecommendationForm />}/>\n          <Route path=\"/\" component={() => <Homepage \n            getHashParams={this.state.getHashParams}\n            user={this.state} exact/>} \n          />\n        </Switch>\n      </BrowserRouter>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}